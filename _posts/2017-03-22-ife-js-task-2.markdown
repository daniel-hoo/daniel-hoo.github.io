---
layout: post
title:  零基础JavaScript编码（二）
description: "零基础JavaScript编码（二）"
share: false
tags: [ife, javascript]
image:
  feature: abstract-2.jpg
---
## 任务目的

- 在上一任务基础上继续JavaScript的体验
- 学习JavaScript中的if判断语法，for循环语法
- 学习JavaScript中的数组对象
- 学习如何读取、处理数据，并动态创建、修改DOM中的内容

## 任务描述

- 参考以下示例代码，页面加载后，将提供的空气质量数据数组，按照某种逻辑（比如空气质量大于60）进行过滤筛选，最后将符合条件的数据按照一定的格式要求显示在网页上

```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>IFE JavaScript Task 01</title>
  </head>
<body>

  <h3>污染城市列表</h3>
  <ul id="aqi-list">
<!--   
    <li>第一名：福州（样例），10</li>
      <li>第二名：福州（样例），10</li> -->
  </ul>

<script type="text/javascript">

var aqiData = [
  ["北京", 90],
  ["上海", 50],
  ["福州", 10],
  ["广州", 50],
  ["成都", 90],
  ["西安", 100]
];

(function () {

  /*
  在注释下方编写代码
  遍历读取aqiData中各个城市的数据
  将空气质量指数大于60的城市显示到aqi-list的列表中
  */

})();

</script>
</body>
</html>
```

## 任务注意事项

- 实现简单功能的同时，请仔细学习JavaScript基本语法、事件、DOM相关的知识
- 请注意代码风格的整齐、优雅
- 代码中含有必要的注释
- 其中的数据以及60的判断逻辑可以自行设定
- 建议不使用任何第三方库、框架
- 示例代码仅为示例，可以直接使用，也可以完全自己重写

## 在线学习参考资料

- <a href="http://www.imooc.com/view/36" target="_blank">JavaScript入门篇</a>
- <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank">MDN JavaScript</a>

## 总结

### 1. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else" target="_blank"><u>MDN if</u></a>


### 2. <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank"><u>MDN for</u></a>

#### for...of与for...in的区别

for...in循环会遍历一个object所有的可枚举属性。
  
for...of语法是为各种collection对象专门定制的，并不适用于所有的object.它会以这种方式迭代出任何拥有[Symbol.iterator] 属性的collection对象的每个元素。

下面的例子演示了for...of 循环和 for...in 循环的区别。for...in 遍历（当前对象及其原型上的）每一个属性名称,而 for...of遍历（当前对象上的）每一个属性值:

```javascript
Object.prototype.objCustom = function () {}; 
Array.prototype.arrCustom = function () {};

let iterable = [3, 5, 7];
iterable.foo = "hello";

for (let i in iterable) {
  console.log(i); // logs 0, 1, 2, "foo", "arrCustom", "objCustom"
}

for (let i of iterable) {
  console.log(i); // logs 3, 5, 7
}
```

### 3. <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449921138898cdeb7fc2214dc08c6c67827758cd2f000" target="_blank"><u>JavaScript教程 数组</u></a>

### 4. filter

filter() 方法接收一个函数测试所有元素，并创建一个包含所有通过测试的元素的**新数组**。

#### 语法

```javascript
var new_array = arr.filter(callback[, thisArg])
```

**参数**

callback

用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。  
返回true表示保留该元素（通过测试），false则不保留。

thisArg

可选。执行 callback 时的用于 this 的值。

**返回值**

 一个新的通过测试的元素的集合的数组

#### 示例：

使用 filter 创建了一个新数组，该数组的元素由原数组中值大于 10 的元素组成。

```javascript
function isBigEnough(element) {
  return element >= 10;
}
var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
// filtered is [12, 130, 44]
```

回调函数callback接收多个参数。

```javascript
var arr = ['A', 'B', 'C'];
var r = arr.filter(function (element, index, self) {
    console.log(element); // 依次打印'A', 'B', 'C'
    console.log(index); // 依次打印0, 1, 2
    console.log(self); // self就是变量arr
    return true;
});
```

thisArg 参数的用法，该参数指定对其引用 this 关键字的对象。

```javascript
var checkNumericRange = function(value) {
    if (typeof value !== 'number')
        return false;
    else 
        return value >= this.minimum && value <= this.maximum;
}

var numbers = [6, 12, "15", 16, "the", -12];

// The obj argument enables use of the this value
// within the callback function.
var obj = { minimum: 10, maximum: 20 }

var result = numbers.filter(checkNumericRange, obj);

document.write(result);
// Output: 12,16
```

参考：

> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank">MDN Array.prototype.filter()</a>
> 
> <a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014351219769203e3fbe1ed611475db3d439393add8997000" target="_blank">JavaScript教程 filter</a>
> 
> <a href="https://msdn.microsoft.com/zh-cn/library/ff679973(v=vs.94).aspx" target="_blank">MSDN filter 方法</a>

### 5. sort

sort() 方法在适当的位置对数组的元素进行排序，并返回**当前数组**。默认排序顺序是根据字符串Unicode码点（即把所有元素先转换为String再排序）。

#### 语法

```javascript
arr.sort() 

arr.sort(compareFunction)
```

**参数**

compareFunction

可选。用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的诸个字符的Unicode位点进行排序。

#### 描述

如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的Unicode位点进行排序。例如 "Banana" 会被排列到 "cherry" 之前。数字比大小时，9 出现在 80 之前，但这里比较时数字会先被转换为字符串，所以 "80" 比 "9" 要靠前。

如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：

- 如果 compareFunction(a, b) 小于 0 ， a 会被排列到 b 之前；
- 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守；
- 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。
- compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。

所以，比较函数格式如下：

```javascript
function compare(a, b) {
  if (a is less than b by some ordering criterion) {
    return -1;
  }
  if (a is greater than b by the ordering criterion) {
    return 1;
  }
  // a must be equal to b
  return 0;
}
```

希望比较数字而非字符串，比较函数可以简单地写成 a 减 b

```javascript
var numbers = [4, 2, 5, 1, 3];
numbers.sort(function(a, b) {
  return a - b;
});
console.log(numbers);

// [1, 2, 3, 4, 5]
```

对象可以按照某个属性排序，按照上面列出的格式即可。

### 6. let

> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let" target="_blank">MDN let</a>
> 
> <a href="http://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var-to-declare-a-variable" target="_blank">What's the difference between using “let” and “var” to declare a variable?</a>

### 7. element.innerHTML和appendChild

- 使用innerHTML，只需要拼接字符串即可，而后者需要先<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createElement" target="_blank"> createElement </a>再<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild" target="_blank"> appendChild </a>。
- 从性能上说，innerHTML效率要高一些，尤其当插入量很大时。
- 但使用innerHTML，需要对字符串的处理十分细心，后期也不利于维护。
- 当需要大量插入时，推荐使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createDocumentFragment" target="_blank"> createDocumentFragment </a> 再 `appendChild`。（这里有<a href="https://jsperf.com/appendchild-vs-documentfragment-vs-innerhtml/61" target="_blank">测试结果</a> ）

### 8. 已提交作业

代码地址：<a href="https://github.com/daniel-hoo/ife-exercises/blob/master/BinBin/task_2.html" target="_blank">https://github.com/daniel-hoo/ife-exercises/blob/master/BinBin/task_2.html</a>  
demo 地址：<a href="https://daniel-hoo.github.io/binbin_task_2/" target="_blank">https://daniel-hoo.github.io/binbin_task_2/</a>